// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: page.proto

#ifndef PROTOBUF_page_2eproto__INCLUDED
#define PROTOBUF_page_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace qi {
namespace pen {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_page_2eproto();
void protobuf_AssignDesc_page_2eproto();
void protobuf_ShutdownFile_page_2eproto();

class CubicBezier2d;
class Stroke;
class Page;

// ===================================================================

class CubicBezier2d : public ::google::protobuf::Message {
 public:
  CubicBezier2d();
  virtual ~CubicBezier2d();

  CubicBezier2d(const CubicBezier2d& from);

  inline CubicBezier2d& operator=(const CubicBezier2d& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CubicBezier2d& default_instance();

  void Swap(CubicBezier2d* other);

  // implements Message ----------------------------------------------

  inline CubicBezier2d* New() const { return New(NULL); }

  CubicBezier2d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CubicBezier2d& from);
  void MergeFrom(const CubicBezier2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CubicBezier2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x0 = 1;
  void clear_x0();
  static const int kX0FieldNumber = 1;
  double x0() const;
  void set_x0(double value);

  // optional double x1 = 2;
  void clear_x1();
  static const int kX1FieldNumber = 2;
  double x1() const;
  void set_x1(double value);

  // optional double x2 = 3;
  void clear_x2();
  static const int kX2FieldNumber = 3;
  double x2() const;
  void set_x2(double value);

  // optional double x3 = 4;
  void clear_x3();
  static const int kX3FieldNumber = 4;
  double x3() const;
  void set_x3(double value);

  // optional double y0 = 5;
  void clear_y0();
  static const int kY0FieldNumber = 5;
  double y0() const;
  void set_y0(double value);

  // optional double y1 = 6;
  void clear_y1();
  static const int kY1FieldNumber = 6;
  double y1() const;
  void set_y1(double value);

  // optional double y2 = 7;
  void clear_y2();
  static const int kY2FieldNumber = 7;
  double y2() const;
  void set_y2(double value);

  // optional double y3 = 8;
  void clear_y3();
  static const int kY3FieldNumber = 8;
  double y3() const;
  void set_y3(double value);

  // @@protoc_insertion_point(class_scope:qi.pen.proto.CubicBezier2d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x0_;
  double x1_;
  double x2_;
  double x3_;
  double y0_;
  double y1_;
  double y2_;
  double y3_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_page_2eproto();
  friend void protobuf_AssignDesc_page_2eproto();
  friend void protobuf_ShutdownFile_page_2eproto();

  void InitAsDefaultInstance();
  static CubicBezier2d* default_instance_;
};
// -------------------------------------------------------------------

class Stroke : public ::google::protobuf::Message {
 public:
  Stroke();
  virtual ~Stroke();

  Stroke(const Stroke& from);

  inline Stroke& operator=(const Stroke& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stroke& default_instance();

  void Swap(Stroke* other);

  // implements Message ----------------------------------------------

  inline Stroke* New() const { return New(NULL); }

  Stroke* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stroke& from);
  void MergeFrom(const Stroke& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stroke* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qi.pen.proto.CubicBezier2d segments = 1;
  int segments_size() const;
  void clear_segments();
  static const int kSegmentsFieldNumber = 1;
  const ::qi::pen::proto::CubicBezier2d& segments(int index) const;
  ::qi::pen::proto::CubicBezier2d* mutable_segments(int index);
  ::qi::pen::proto::CubicBezier2d* add_segments();
  const ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d >&
      segments() const;
  ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d >*
      mutable_segments();

  // @@protoc_insertion_point(class_scope:qi.pen.proto.Stroke)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d > segments_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_page_2eproto();
  friend void protobuf_AssignDesc_page_2eproto();
  friend void protobuf_ShutdownFile_page_2eproto();

  void InitAsDefaultInstance();
  static Stroke* default_instance_;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  void Swap(Page* other);

  // implements Message ----------------------------------------------

  inline Page* New() const { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qi.pen.proto.Stroke strokes = 1;
  int strokes_size() const;
  void clear_strokes();
  static const int kStrokesFieldNumber = 1;
  const ::qi::pen::proto::Stroke& strokes(int index) const;
  ::qi::pen::proto::Stroke* mutable_strokes(int index);
  ::qi::pen::proto::Stroke* add_strokes();
  const ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke >&
      strokes() const;
  ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke >*
      mutable_strokes();

  // @@protoc_insertion_point(class_scope:qi.pen.proto.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke > strokes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_page_2eproto();
  friend void protobuf_AssignDesc_page_2eproto();
  friend void protobuf_ShutdownFile_page_2eproto();

  void InitAsDefaultInstance();
  static Page* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CubicBezier2d

// optional double x0 = 1;
inline void CubicBezier2d::clear_x0() {
  x0_ = 0;
}
inline double CubicBezier2d::x0() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x0)
  return x0_;
}
inline void CubicBezier2d::set_x0(double value) {
  
  x0_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x0)
}

// optional double x1 = 2;
inline void CubicBezier2d::clear_x1() {
  x1_ = 0;
}
inline double CubicBezier2d::x1() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x1)
  return x1_;
}
inline void CubicBezier2d::set_x1(double value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x1)
}

// optional double x2 = 3;
inline void CubicBezier2d::clear_x2() {
  x2_ = 0;
}
inline double CubicBezier2d::x2() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x2)
  return x2_;
}
inline void CubicBezier2d::set_x2(double value) {
  
  x2_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x2)
}

// optional double x3 = 4;
inline void CubicBezier2d::clear_x3() {
  x3_ = 0;
}
inline double CubicBezier2d::x3() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x3)
  return x3_;
}
inline void CubicBezier2d::set_x3(double value) {
  
  x3_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x3)
}

// optional double y0 = 5;
inline void CubicBezier2d::clear_y0() {
  y0_ = 0;
}
inline double CubicBezier2d::y0() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y0)
  return y0_;
}
inline void CubicBezier2d::set_y0(double value) {
  
  y0_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y0)
}

// optional double y1 = 6;
inline void CubicBezier2d::clear_y1() {
  y1_ = 0;
}
inline double CubicBezier2d::y1() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y1)
  return y1_;
}
inline void CubicBezier2d::set_y1(double value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y1)
}

// optional double y2 = 7;
inline void CubicBezier2d::clear_y2() {
  y2_ = 0;
}
inline double CubicBezier2d::y2() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y2)
  return y2_;
}
inline void CubicBezier2d::set_y2(double value) {
  
  y2_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y2)
}

// optional double y3 = 8;
inline void CubicBezier2d::clear_y3() {
  y3_ = 0;
}
inline double CubicBezier2d::y3() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y3)
  return y3_;
}
inline void CubicBezier2d::set_y3(double value) {
  
  y3_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y3)
}

// -------------------------------------------------------------------

// Stroke

// repeated .qi.pen.proto.CubicBezier2d segments = 1;
inline int Stroke::segments_size() const {
  return segments_.size();
}
inline void Stroke::clear_segments() {
  segments_.Clear();
}
inline const ::qi::pen::proto::CubicBezier2d& Stroke::segments(int index) const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.Stroke.segments)
  return segments_.Get(index);
}
inline ::qi::pen::proto::CubicBezier2d* Stroke::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:qi.pen.proto.Stroke.segments)
  return segments_.Mutable(index);
}
inline ::qi::pen::proto::CubicBezier2d* Stroke::add_segments() {
  // @@protoc_insertion_point(field_add:qi.pen.proto.Stroke.segments)
  return segments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d >&
Stroke::segments() const {
  // @@protoc_insertion_point(field_list:qi.pen.proto.Stroke.segments)
  return segments_;
}
inline ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d >*
Stroke::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:qi.pen.proto.Stroke.segments)
  return &segments_;
}

// -------------------------------------------------------------------

// Page

// repeated .qi.pen.proto.Stroke strokes = 1;
inline int Page::strokes_size() const {
  return strokes_.size();
}
inline void Page::clear_strokes() {
  strokes_.Clear();
}
inline const ::qi::pen::proto::Stroke& Page::strokes(int index) const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.Page.strokes)
  return strokes_.Get(index);
}
inline ::qi::pen::proto::Stroke* Page::mutable_strokes(int index) {
  // @@protoc_insertion_point(field_mutable:qi.pen.proto.Page.strokes)
  return strokes_.Mutable(index);
}
inline ::qi::pen::proto::Stroke* Page::add_strokes() {
  // @@protoc_insertion_point(field_add:qi.pen.proto.Page.strokes)
  return strokes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke >&
Page::strokes() const {
  // @@protoc_insertion_point(field_list:qi.pen.proto.Page.strokes)
  return strokes_;
}
inline ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke >*
Page::mutable_strokes() {
  // @@protoc_insertion_point(field_mutable_list:qi.pen.proto.Page.strokes)
  return &strokes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pen
}  // namespace qi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_page_2eproto__INCLUDED
