// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: page.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "page.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qi {
namespace pen {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CubicBezier2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CubicBezier2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stroke_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stroke_reflection_ = NULL;
const ::google::protobuf::Descriptor* Page_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Page_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_page_2eproto() {
  protobuf_AddDesc_page_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "page.proto");
  GOOGLE_CHECK(file != NULL);
  CubicBezier2d_descriptor_ = file->message_type(0);
  static const int CubicBezier2d_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, x0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, x3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, y0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, y3_),
  };
  CubicBezier2d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CubicBezier2d_descriptor_,
      CubicBezier2d::default_instance_,
      CubicBezier2d_offsets_,
      -1,
      -1,
      -1,
      sizeof(CubicBezier2d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBezier2d, _is_default_instance_));
  Stroke_descriptor_ = file->message_type(1);
  static const int Stroke_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stroke, segments_),
  };
  Stroke_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stroke_descriptor_,
      Stroke::default_instance_,
      Stroke_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stroke),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stroke, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stroke, _is_default_instance_));
  Page_descriptor_ = file->message_type(2);
  static const int Page_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, strokes_),
  };
  Page_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Page_descriptor_,
      Page::default_instance_,
      Page_offsets_,
      -1,
      -1,
      -1,
      sizeof(Page),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_page_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CubicBezier2d_descriptor_, &CubicBezier2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stroke_descriptor_, &Stroke::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Page_descriptor_, &Page::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_page_2eproto() {
  delete CubicBezier2d::default_instance_;
  delete CubicBezier2d_reflection_;
  delete Stroke::default_instance_;
  delete Stroke_reflection_;
  delete Page::default_instance_;
  delete Page_reflection_;
}

void protobuf_AddDesc_page_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npage.proto\022\014qi.pen.proto\"o\n\rCubicBezie"
    "r2d\022\n\n\002x0\030\001 \001(\001\022\n\n\002x1\030\002 \001(\001\022\n\n\002x2\030\003 \001(\001\022"
    "\n\n\002x3\030\004 \001(\001\022\n\n\002y0\030\005 \001(\001\022\n\n\002y1\030\006 \001(\001\022\n\n\002y"
    "2\030\007 \001(\001\022\n\n\002y3\030\010 \001(\001\"7\n\006Stroke\022-\n\010segment"
    "s\030\001 \003(\0132\033.qi.pen.proto.CubicBezier2d\"-\n\004"
    "Page\022%\n\007strokes\030\001 \003(\0132\024.qi.pen.proto.Str"
    "okeb\006proto3", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "page.proto", &protobuf_RegisterTypes);
  CubicBezier2d::default_instance_ = new CubicBezier2d();
  Stroke::default_instance_ = new Stroke();
  Page::default_instance_ = new Page();
  CubicBezier2d::default_instance_->InitAsDefaultInstance();
  Stroke::default_instance_->InitAsDefaultInstance();
  Page::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_page_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_page_2eproto {
  StaticDescriptorInitializer_page_2eproto() {
    protobuf_AddDesc_page_2eproto();
  }
} static_descriptor_initializer_page_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CubicBezier2d::kX0FieldNumber;
const int CubicBezier2d::kX1FieldNumber;
const int CubicBezier2d::kX2FieldNumber;
const int CubicBezier2d::kX3FieldNumber;
const int CubicBezier2d::kY0FieldNumber;
const int CubicBezier2d::kY1FieldNumber;
const int CubicBezier2d::kY2FieldNumber;
const int CubicBezier2d::kY3FieldNumber;
#endif  // !_MSC_VER

CubicBezier2d::CubicBezier2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qi.pen.proto.CubicBezier2d)
}

void CubicBezier2d::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CubicBezier2d::CubicBezier2d(const CubicBezier2d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qi.pen.proto.CubicBezier2d)
}

void CubicBezier2d::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x0_ = 0;
  x1_ = 0;
  x2_ = 0;
  x3_ = 0;
  y0_ = 0;
  y1_ = 0;
  y2_ = 0;
  y3_ = 0;
}

CubicBezier2d::~CubicBezier2d() {
  // @@protoc_insertion_point(destructor:qi.pen.proto.CubicBezier2d)
  SharedDtor();
}

void CubicBezier2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CubicBezier2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CubicBezier2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CubicBezier2d_descriptor_;
}

const CubicBezier2d& CubicBezier2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_page_2eproto();
  return *default_instance_;
}

CubicBezier2d* CubicBezier2d::default_instance_ = NULL;

CubicBezier2d* CubicBezier2d::New(::google::protobuf::Arena* arena) const {
  CubicBezier2d* n = new CubicBezier2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CubicBezier2d::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CubicBezier2d*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x0_, y3_);

#undef ZR_HELPER_
#undef ZR_

}

bool CubicBezier2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qi.pen.proto.CubicBezier2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x0 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x1;
        break;
      }

      // optional double x1 = 2;
      case 2: {
        if (tag == 17) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_x2;
        break;
      }

      // optional double x2 = 3;
      case 3: {
        if (tag == 25) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x3;
        break;
      }

      // optional double x3 = 4;
      case 4: {
        if (tag == 33) {
         parse_x3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y0;
        break;
      }

      // optional double y0 = 5;
      case 5: {
        if (tag == 41) {
         parse_y0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_y1;
        break;
      }

      // optional double y1 = 6;
      case 6: {
        if (tag == 49) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_y2;
        break;
      }

      // optional double y2 = 7;
      case 7: {
        if (tag == 57) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_y3;
        break;
      }

      // optional double y3 = 8;
      case 8: {
        if (tag == 65) {
         parse_y3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qi.pen.proto.CubicBezier2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qi.pen.proto.CubicBezier2d)
  return false;
#undef DO_
}

void CubicBezier2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qi.pen.proto.CubicBezier2d)
  // optional double x0 = 1;
  if (this->x0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x0(), output);
  }

  // optional double x1 = 2;
  if (this->x1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x1(), output);
  }

  // optional double x2 = 3;
  if (this->x2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x2(), output);
  }

  // optional double x3 = 4;
  if (this->x3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x3(), output);
  }

  // optional double y0 = 5;
  if (this->y0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y0(), output);
  }

  // optional double y1 = 6;
  if (this->y1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->y1(), output);
  }

  // optional double y2 = 7;
  if (this->y2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->y2(), output);
  }

  // optional double y3 = 8;
  if (this->y3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->y3(), output);
  }

  // @@protoc_insertion_point(serialize_end:qi.pen.proto.CubicBezier2d)
}

::google::protobuf::uint8* CubicBezier2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qi.pen.proto.CubicBezier2d)
  // optional double x0 = 1;
  if (this->x0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x0(), target);
  }

  // optional double x1 = 2;
  if (this->x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x1(), target);
  }

  // optional double x2 = 3;
  if (this->x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x2(), target);
  }

  // optional double x3 = 4;
  if (this->x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x3(), target);
  }

  // optional double y0 = 5;
  if (this->y0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y0(), target);
  }

  // optional double y1 = 6;
  if (this->y1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->y1(), target);
  }

  // optional double y2 = 7;
  if (this->y2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->y2(), target);
  }

  // optional double y3 = 8;
  if (this->y3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->y3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:qi.pen.proto.CubicBezier2d)
  return target;
}

int CubicBezier2d::ByteSize() const {
  int total_size = 0;

  // optional double x0 = 1;
  if (this->x0() != 0) {
    total_size += 1 + 8;
  }

  // optional double x1 = 2;
  if (this->x1() != 0) {
    total_size += 1 + 8;
  }

  // optional double x2 = 3;
  if (this->x2() != 0) {
    total_size += 1 + 8;
  }

  // optional double x3 = 4;
  if (this->x3() != 0) {
    total_size += 1 + 8;
  }

  // optional double y0 = 5;
  if (this->y0() != 0) {
    total_size += 1 + 8;
  }

  // optional double y1 = 6;
  if (this->y1() != 0) {
    total_size += 1 + 8;
  }

  // optional double y2 = 7;
  if (this->y2() != 0) {
    total_size += 1 + 8;
  }

  // optional double y3 = 8;
  if (this->y3() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CubicBezier2d::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CubicBezier2d* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CubicBezier2d>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CubicBezier2d::MergeFrom(const CubicBezier2d& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x0() != 0) {
    set_x0(from.x0());
  }
  if (from.x1() != 0) {
    set_x1(from.x1());
  }
  if (from.x2() != 0) {
    set_x2(from.x2());
  }
  if (from.x3() != 0) {
    set_x3(from.x3());
  }
  if (from.y0() != 0) {
    set_y0(from.y0());
  }
  if (from.y1() != 0) {
    set_y1(from.y1());
  }
  if (from.y2() != 0) {
    set_y2(from.y2());
  }
  if (from.y3() != 0) {
    set_y3(from.y3());
  }
}

void CubicBezier2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CubicBezier2d::CopyFrom(const CubicBezier2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubicBezier2d::IsInitialized() const {

  return true;
}

void CubicBezier2d::Swap(CubicBezier2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CubicBezier2d::InternalSwap(CubicBezier2d* other) {
  std::swap(x0_, other->x0_);
  std::swap(x1_, other->x1_);
  std::swap(x2_, other->x2_);
  std::swap(x3_, other->x3_);
  std::swap(y0_, other->y0_);
  std::swap(y1_, other->y1_);
  std::swap(y2_, other->y2_);
  std::swap(y3_, other->y3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CubicBezier2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CubicBezier2d_descriptor_;
  metadata.reflection = CubicBezier2d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CubicBezier2d

// optional double x0 = 1;
void CubicBezier2d::clear_x0() {
  x0_ = 0;
}
 double CubicBezier2d::x0() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x0)
  return x0_;
}
 void CubicBezier2d::set_x0(double value) {
  
  x0_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x0)
}

// optional double x1 = 2;
void CubicBezier2d::clear_x1() {
  x1_ = 0;
}
 double CubicBezier2d::x1() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x1)
  return x1_;
}
 void CubicBezier2d::set_x1(double value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x1)
}

// optional double x2 = 3;
void CubicBezier2d::clear_x2() {
  x2_ = 0;
}
 double CubicBezier2d::x2() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x2)
  return x2_;
}
 void CubicBezier2d::set_x2(double value) {
  
  x2_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x2)
}

// optional double x3 = 4;
void CubicBezier2d::clear_x3() {
  x3_ = 0;
}
 double CubicBezier2d::x3() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.x3)
  return x3_;
}
 void CubicBezier2d::set_x3(double value) {
  
  x3_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.x3)
}

// optional double y0 = 5;
void CubicBezier2d::clear_y0() {
  y0_ = 0;
}
 double CubicBezier2d::y0() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y0)
  return y0_;
}
 void CubicBezier2d::set_y0(double value) {
  
  y0_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y0)
}

// optional double y1 = 6;
void CubicBezier2d::clear_y1() {
  y1_ = 0;
}
 double CubicBezier2d::y1() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y1)
  return y1_;
}
 void CubicBezier2d::set_y1(double value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y1)
}

// optional double y2 = 7;
void CubicBezier2d::clear_y2() {
  y2_ = 0;
}
 double CubicBezier2d::y2() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y2)
  return y2_;
}
 void CubicBezier2d::set_y2(double value) {
  
  y2_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y2)
}

// optional double y3 = 8;
void CubicBezier2d::clear_y3() {
  y3_ = 0;
}
 double CubicBezier2d::y3() const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.CubicBezier2d.y3)
  return y3_;
}
 void CubicBezier2d::set_y3(double value) {
  
  y3_ = value;
  // @@protoc_insertion_point(field_set:qi.pen.proto.CubicBezier2d.y3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Stroke::kSegmentsFieldNumber;
#endif  // !_MSC_VER

Stroke::Stroke()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qi.pen.proto.Stroke)
}

void Stroke::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Stroke::Stroke(const Stroke& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qi.pen.proto.Stroke)
}

void Stroke::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Stroke::~Stroke() {
  // @@protoc_insertion_point(destructor:qi.pen.proto.Stroke)
  SharedDtor();
}

void Stroke::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stroke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stroke::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stroke_descriptor_;
}

const Stroke& Stroke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_page_2eproto();
  return *default_instance_;
}

Stroke* Stroke::default_instance_ = NULL;

Stroke* Stroke::New(::google::protobuf::Arena* arena) const {
  Stroke* n = new Stroke;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stroke::Clear() {
  segments_.Clear();
}

bool Stroke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qi.pen.proto.Stroke)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qi.pen.proto.CubicBezier2d segments = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_segments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qi.pen.proto.Stroke)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qi.pen.proto.Stroke)
  return false;
#undef DO_
}

void Stroke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qi.pen.proto.Stroke)
  // repeated .qi.pen.proto.CubicBezier2d segments = 1;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:qi.pen.proto.Stroke)
}

::google::protobuf::uint8* Stroke::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qi.pen.proto.Stroke)
  // repeated .qi.pen.proto.CubicBezier2d segments = 1;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->segments(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:qi.pen.proto.Stroke)
  return target;
}

int Stroke::ByteSize() const {
  int total_size = 0;

  // repeated .qi.pen.proto.CubicBezier2d segments = 1;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stroke::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stroke* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stroke>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stroke::MergeFrom(const Stroke& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  segments_.MergeFrom(from.segments_);
}

void Stroke::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stroke::CopyFrom(const Stroke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stroke::IsInitialized() const {

  return true;
}

void Stroke::Swap(Stroke* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stroke::InternalSwap(Stroke* other) {
  segments_.UnsafeArenaSwap(&other->segments_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stroke::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stroke_descriptor_;
  metadata.reflection = Stroke_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stroke

// repeated .qi.pen.proto.CubicBezier2d segments = 1;
int Stroke::segments_size() const {
  return segments_.size();
}
void Stroke::clear_segments() {
  segments_.Clear();
}
 const ::qi::pen::proto::CubicBezier2d& Stroke::segments(int index) const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.Stroke.segments)
  return segments_.Get(index);
}
 ::qi::pen::proto::CubicBezier2d* Stroke::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:qi.pen.proto.Stroke.segments)
  return segments_.Mutable(index);
}
 ::qi::pen::proto::CubicBezier2d* Stroke::add_segments() {
  // @@protoc_insertion_point(field_add:qi.pen.proto.Stroke.segments)
  return segments_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d >&
Stroke::segments() const {
  // @@protoc_insertion_point(field_list:qi.pen.proto.Stroke.segments)
  return segments_;
}
 ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::CubicBezier2d >*
Stroke::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:qi.pen.proto.Stroke.segments)
  return &segments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Page::kStrokesFieldNumber;
#endif  // !_MSC_VER

Page::Page()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qi.pen.proto.Page)
}

void Page::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Page::Page(const Page& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qi.pen.proto.Page)
}

void Page::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:qi.pen.proto.Page)
  SharedDtor();
}

void Page::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Page::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Page::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Page_descriptor_;
}

const Page& Page::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_page_2eproto();
  return *default_instance_;
}

Page* Page::default_instance_ = NULL;

Page* Page::New(::google::protobuf::Arena* arena) const {
  Page* n = new Page;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Page::Clear() {
  strokes_.Clear();
}

bool Page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qi.pen.proto.Page)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qi.pen.proto.Stroke strokes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_strokes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_strokes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_strokes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qi.pen.proto.Page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qi.pen.proto.Page)
  return false;
#undef DO_
}

void Page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qi.pen.proto.Page)
  // repeated .qi.pen.proto.Stroke strokes = 1;
  for (unsigned int i = 0, n = this->strokes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strokes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:qi.pen.proto.Page)
}

::google::protobuf::uint8* Page::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qi.pen.proto.Page)
  // repeated .qi.pen.proto.Stroke strokes = 1;
  for (unsigned int i = 0, n = this->strokes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strokes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:qi.pen.proto.Page)
  return target;
}

int Page::ByteSize() const {
  int total_size = 0;

  // repeated .qi.pen.proto.Stroke strokes = 1;
  total_size += 1 * this->strokes_size();
  for (int i = 0; i < this->strokes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strokes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Page::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Page* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Page>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  strokes_.MergeFrom(from.strokes_);
}

void Page::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {

  return true;
}

void Page::Swap(Page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Page::InternalSwap(Page* other) {
  strokes_.UnsafeArenaSwap(&other->strokes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Page::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Page_descriptor_;
  metadata.reflection = Page_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Page

// repeated .qi.pen.proto.Stroke strokes = 1;
int Page::strokes_size() const {
  return strokes_.size();
}
void Page::clear_strokes() {
  strokes_.Clear();
}
 const ::qi::pen::proto::Stroke& Page::strokes(int index) const {
  // @@protoc_insertion_point(field_get:qi.pen.proto.Page.strokes)
  return strokes_.Get(index);
}
 ::qi::pen::proto::Stroke* Page::mutable_strokes(int index) {
  // @@protoc_insertion_point(field_mutable:qi.pen.proto.Page.strokes)
  return strokes_.Mutable(index);
}
 ::qi::pen::proto::Stroke* Page::add_strokes() {
  // @@protoc_insertion_point(field_add:qi.pen.proto.Page.strokes)
  return strokes_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke >&
Page::strokes() const {
  // @@protoc_insertion_point(field_list:qi.pen.proto.Page.strokes)
  return strokes_;
}
 ::google::protobuf::RepeatedPtrField< ::qi::pen::proto::Stroke >*
Page::mutable_strokes() {
  // @@protoc_insertion_point(field_mutable_list:qi.pen.proto.Page.strokes)
  return &strokes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pen
}  // namespace qi

// @@protoc_insertion_point(global_scope)
